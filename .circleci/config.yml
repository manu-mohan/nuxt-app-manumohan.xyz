version: 2
jobs:
  build:
    docker:
      - image: circleci/node:8
    steps:
      - checkout
      - restore_cache:
          keys:
            - npm-cache-{{ .Branch }}-{{ checksum "package.json" }}
      - run: npm install
      - save_cache:
          paths:
            - node_modules
          key: npm-cache-{{ .Branch }}-{{ checksum "package.json" }}
      - run: npm run test
      - run: npm run generate
      - run: ls -lart
      - persist_to_workspace:
          root: ~/project
          paths:
            - dist
            - .circleci
      - store_artifacts:
          path: dist
  shellcheck:
    docker:
      - image: koalaman/shellcheck-alpine:stable
    steps:
      - checkout
      - run:
          name: Check Scripts
          command: |
            echo "Hello"
  deploy:
    docker:
      - image: circleci/node:8
    environment:
      - SOURCE_BRANCH: master
      - TARGET_BRANCH: gh-pages
    steps:
      - attach_workspace:
          at: workspace
      - run: echo {{ .Environment.GITHUB_REPO_URL }}
      - run: echo {{ .GITHUB_REPO_URL }}
      - deploy:
          name: Deploy
          type: shell
          command: |
            if [ "${CIRCLE_BRANCH}" == "${SOURCE_BRANCH}" ]; then
              git config --global user.email "{{ .Environment.GITHUB_EMAIL }}"
              git config --global user.name "{{ .Environment.GITHUB_NAME }}"

              mkdir ~/.ssh/ && echo -e "Host github.com\n\tStrictHostKeyChecking no\n" > ~/.ssh/config

              git clone "{{ .Environment.GITHUB_REPO_URL }}" out

              cd out
              git checkout "${TARGET_BRANCH}" || git checkout --orphan "${TARGET_BRANCH}"
              git rm -rf .
              cd ..

              cp -a workspace/dist/. out/.

              mkdir -p out/.circleci && cp -a workspace/.circleci out/.
              cd out

              ls -ralt
              git add -A
              git commit -m "Automated deployment to GitHub Pages: ${CIRCLE_SHA1}" --allow-empty

              git push origin "${TARGET_BRANCH}"
            fi
workflows:
  version: 2
  build_deploy:
    jobs:
      - build
      # - shellcheck
      - deploy:
          context: GlobalConfig
          requires:
            - build
          filters:
            branches:
              only: master
